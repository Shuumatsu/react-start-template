const webpack = require('webpack')
const express = require('express')
const detect = require('detect-port')
const { format } = require('date-fns')
const chalk = require('chalk')
const { mapObjIndexed } = require('ramda')
const Jarvis = require('webpack-jarvis')
const createWebpackMiddleware = require('webpack-dev-middleware')
const createWebpackHotMiddleware = require('webpack-hot-middleware')
const path = require('path')
const serverConfig = require('../config/webpack.config.server')
const paths = require('../config/paths')
const config = require('../config/webpack.config.dev')

require('dotenv').config({ path: paths.dotenv })
process.env.NODE_ENV = process.env.NODE_ENV || 'development'

config.plugins.unshift(
    new webpack.DefinePlugin({
        'process.env': mapObjIndexed(JSON.stringify, process.env)
    })
)

const detectPort = (...ports) => Promise.all(ports.map(detect))
const defaultJarvisPort = parseInt(process.env.JARVIS_PORT, 10) || 8000
const defaultPort = parseInt(process.env.PORT, 10) || 9000
detectPort(defaultPort, defaultJarvisPort).then(([port, jarvisPort]) => {
    console.log(chalk.magenta('Starting the development server...'))

    config.plugins.unshift(
        new Jarvis({
            port: jarvisPort
        })
    )

    const compiler = webpack(config)
    compiler.plugin('invalid', (fileName, changeTime) => {
        console.log(chalk.blue.bold(`\n--- ${format(changeTime, 'MMMM Do YYYY, HH:mm:ss:SSS')} ---\n`))

        console.log('File changed: \n')
        console.log(chalk.yellow(`  ${fileName}`))
        console.log('\nRecompiling...\n')
    })
    compiler.plugin('done', stats => {
        console.log(chalk.blue.bold(`\n--- ${format(Date.now(), 'MMMM Do YYYY, HH:mm:ss:SSS')} ---\n`))

        const info = stats.toJson()

        if (stats.hasErrors()) {
            console.log(chalk.red('Failed to compile.\n'))
            for (const error of info.errors) console.log(error)
            console.log()
            return
        }

        if (stats.hasWarnings()) {
            console.log(chalk.yellow('Compiled with warnings.\n'))
            for (const warning of info.warnings) console.log(warning)
            console.log()
            return
        }

        console.log('The app is running at:\n')
        console.log(chalk.cyan(`  http://localhost:${port}`))
        console.log('\nThe jarvis is running at:\n')
        console.log(chalk.cyan(`  http://localhost:${jarvisPort}`))
        console.log('\nNote that the development build is not optimized.\n')
    })

    const webpackDevMiddleware = createWebpackMiddleware(compiler, serverConfig)
    const webpackHotMiddleware = createWebpackHotMiddleware(compiler)

    const app = express()
    app.use(express.static(paths.build))
    app.use((req, res, next) => {
        if (/service-worker/.test(req.url)) res.set('Service-Worker-Allowed', '/')
        next()
    })
    app.use(webpackDevMiddleware)
    app.use(webpackHotMiddleware)
    app.use((req, res, next) => {
        // res.sendFile(`${__dirname}/index.html`)
        // Since index.html is dynamicly generated by html-webpack-plugin
        // we cannot access it from the local file system
        // just rewrite the request and call webpackDevMiddleware again
        req.url = path.resolve(paths.servedPath, 'index.html')
        webpackDevMiddleware(req, res, next)
    })

    app.listen(port)
})
